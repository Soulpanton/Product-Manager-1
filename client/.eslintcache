[{"/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/index.js":"1","/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/reportWebVitals.js":"2","/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/App.js":"3","/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/components/Main.js":"4","/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/components/ProductInfo.js":"5","/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/components/NewProduct.jsx":"6","/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/components/EditProduct.js":"7"},{"size":500,"mtime":1611266081541,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1611266081542,"results":"10","hashOfConfig":"9"},{"size":1058,"mtime":1611522809084,"results":"11","hashOfConfig":"9"},{"size":2995,"mtime":1611596288396,"results":"12","hashOfConfig":"9"},{"size":1867,"mtime":1611517009586,"results":"13","hashOfConfig":"9"},{"size":1868,"mtime":1611516114518,"results":"14","hashOfConfig":"9"},{"size":2717,"mtime":1611611518897,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1ccdy0t",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/index.js",[],["34","35"],"/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/reportWebVitals.js",[],"/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/App.js",[],"/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/components/Main.js",[],"/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/components/ProductInfo.js",["36"],"// {useEffect} to render as soon as the api call is make\n// useState  to create a variable to store info that could change\nimport React, { useEffect, useState } from 'react';\n// to make api calls\nimport Axios from 'axios';\n\n// passing the info from the route with props grants us access to that info\nconst ProductInfo = (props) => {\n    console.log(\"LOGGING PROPS FROM PRODUCT INFO COMPONENTS!!!\", props)\n    // set useState to an object initially cause were going to get a product object from response\n    const [productDetails, setProductDetails] = useState({\n        // have the use state to expect the following initial main keys \n        title: \"\",\n        price: \"\",\n        description: \"\"\n    })\n\n    // 2 parts for useEffect\n    // 1 the call back function then a comma\n    //  then an array that runs the function when loading the page\n    useEffect(() => {\n        // api call with get + the id\n        Axios.get(`http://localhost:8000/api/products/${props.productId}`)\n            .then(response => {\n                console.log(\"got back the response from api to find the product\", response)\n                // setting the info from the api into productDetails using setProductDetails\n                setProductDetails(response.data.results)\n            })\n            .catch(err => console.log(\"ERROOOORRRRRRRRRR\", err))\n    }, [])\n    return (\n        <div>\n            <h3>Heres the info about that product</h3>\n            {/* info passed through pros */}\n            <p>Player Id: {props.productId}</p>\n            {/* cause we set state to productDetails we can access that info and show it  */}\n            <p>Product Title: {productDetails.title}</p>\n            <p>Product Price: {productDetails.price.$numberDecimal}</p>\n            <p>Product Description: {productDetails.description}</p>\n        </div>\n    );\n};\n\n\nexport default ProductInfo;","/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/components/NewProduct.jsx",[],["37","38"],"/Users/juanpablogermosen/Documents/coding_dojo/mern/full_stack/product_manager/client/src/components/EditProduct.js",["39","40"],"import React, { useEffect, useState } from 'react';\nimport Axios from \"axios\";\nimport { navigate } from '@reach/router';\n\nfunction EditProduct(props) {\n    const [productDetails, setProductDetails] = useState({\n        // have the use state to expect the following initial main keys \n        title: \"\",\n        price: \"\",\n        description: \"\"\n    })\n\n    const [errors, setErrors] = useState({})\n\n    // to make an api call on loading of the page\n    useEffect(() => {\n        Axios.get(`http://localhost:8000/api/products/${props.productId}`)\n            .then(response => {\n                console.log(\"RESPONSE FROM THE API CALL\", response)\n                setProductDetails(response.data.results)\n            })\n        // don't forget to add the brackets if not its going to send non stop api calls\n    }, [])\n\n    const changeHandler = e => {\n        console.log(\"oooohhhhhhhhhh you trying to edit something on \", e.target.name)\n        setProductDetails({\n            ...productDetails,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const submitHandler = e => {\n        e.preventDefault();\n        console.log(\"TRYING TO SUBMIT SOME INFO I SEE!!!\")\n        // remember to add the variable where the info is store inState after the put request\n        Axios.put(`http://localhost:8000/api/products/update/${props.productId}`, productDetails)\n            .then(response => {\n                console.log(\"Just updated the info on the for its right here:\", response)\n                if (response.data.results) {\n                    navigate(\"/\")\n                }\n                else {\n                    setErrors(response.data.errors)\n\n                }\n            })\n            .catch(err => console.log(\"err on trying to update info\", err))\n    }\n\n\n    return (\n        <div>\n            <h3>Edit a Product</h3>\n            <form onSubmit={submitHandler}>\n                <div>\n                    <label htmlFor=\"\">Title</label>\n                    <input type=\"text\" name=\"title\" id=\"\" value={productDetails.title} onChange={changeHandler} />\n                </div>\n\n                <div>\n                    <label htmlFor=\"\">Price $</label>\n                    <input type=\"number\" step=\"0.01\" name=\"price\" id=\"\" value={productDetails.price.$numberDecimal} onChange={changeHandler} />\n\n                </div>\n\n                <div>\n                    <label htmlFor=\"\">Description</label>\n                    <input type=\"text\" name=\"description\" id=\"\" value={productDetails.description} onChange={changeHandler} />\n                </div>\n                <input type=\"submit\" value=\"Edit This Product\" />\n            </form>\n        </div>\n    );\n}\n\n\nexport default EditProduct;",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":30,"column":8,"nodeType":"47","endLine":30,"endColumn":10,"suggestions":"48"},{"ruleId":"41","replacedBy":"49"},{"ruleId":"43","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":13,"column":12,"nodeType":"53","messageId":"54","endLine":13,"endColumn":18},{"ruleId":"45","severity":1,"message":"46","line":23,"column":8,"nodeType":"47","endLine":23,"endColumn":10,"suggestions":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.productId'. Either include it or remove the dependency array.","ArrayExpression",["58"],["56"],["57"],"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar",["59"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},{"desc":"60","fix":"62"},"Update the dependencies array to be: [props.productId]",{"range":"63","text":"64"},{"range":"65","text":"64"},[1342,1344],"[props.productId]",[814,816]]